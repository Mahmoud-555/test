<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Email Verification</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(to right, #4facfe 0%, #00f2fe 100%);
            color: #333;
            text-align: center;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 400px;
        }
        h1 {
            margin-bottom: 20px;
            font-size: 1.8rem;
            font-weight: 700;
        }
        .message {
            display: none; /* Hidden by default */
            padding: 15px;
            margin-top: 20px;
            border-radius: 5px;
            transition: opacity 0.5s ease;
            font-size: 1rem;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .spinner {
            display: none;
            margin: 20px auto;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .icon {
            width: 80px;
            height: 80px;
            margin: 20px auto;
            animation: fadeIn 0.5s linear;
        }
        @keyframes fadeIn {
            0% { opacity: 0; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Email Verification</h1>
        <img src="https://cdn-icons-png.flaticon.com/512/633/633628.png" alt="Email Icon" class="icon">
        <div class="spinner" id="spinner"></div>
        <p id="statusMessage" class="message"></p>
        <div id="successState" class="message success"></div>
        <div id="errorState" class="message error"></div>
    </div>

    <script>
        // Function to get URL parameters
        function getQueryParams() {
            const params = {};
            const search = window.location.search.slice(1);
            const pairs = search.split('&');

            pairs.forEach(pair => {
                const [key, value] = pair.split('=');
                params[decodeURIComponent(key)] = decodeURIComponent(value || '');
            });

            return params;
        }

        // Function to verify email
        async function verifyEmail(id, token) {
            const spinner = document.getElementById('spinner');
            const statusMessage = document.getElementById('statusMessage');
            const successState = document.getElementById('successState');
            const errorState = document.getElementById('errorState');

            // Reset state
            spinner.style.display = 'block';
            successState.style.display = 'none';
            errorState.style.display = 'none';
            statusMessage.style.display = 'none';

            try {
                const response = await fetch(`/api/v1/auth/verifyEmail?id=${id}&token=${token}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id, token })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                // Handle success and error states
                if (data.verified) {
                    successState.textContent = 'Email successfully verified!';
                    successState.style.display = 'block';
                } else {
                    errorState.textContent = data.message;
                    errorState.style.display = 'block';
                }
            } catch (error) {
                errorState.textContent = 'There was a problem with the verification: ' + error.message;
                errorState.style.display = 'block';
            } finally {
                spinner.style.display = 'none'; // Hide spinner
            }
        }

        // Get parameters from URL and verify email
        window.onload = function() {
            const params = getQueryParams();
            const id = params.id;
            const token = params.token;

            if (id && token) {
                verifyEmail(id, token);
            } else {
                const errorState = document.getElementById('errorState');
                errorState.textContent = 'Invalid verification link.';
                errorState.style.display = 'block';
            }
        };
    </script>
</body>
</html>