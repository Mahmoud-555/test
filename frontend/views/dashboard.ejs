<!DOCTYPE html>
<html lang="en">

<head>
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <script src="/javascripts/dashboard/dashboardViews.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- question section style -->

    <link rel="stylesheet" href="/stylesheets/dashboard-style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --danger: #f72585;
            --warning: #f8961e;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

        }

        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            color: #333;
            min-height: 100vh;
            /* padding: 20px; */
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* header {
            text-align: center;
            padding: 30px 0;
            color: white;
        } */

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .page {
            background: white;
            border-radius: 15px;
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.2);
            padding: 30px;
            margin: 20px 0;
            min-height: 500px;
        }

        .page-title {
            color: #1a2a6c;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }


        .btn:hover {
            background: var(--secondary);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn-delete {
            background: #e74c3c;
        }

        .btn-delete:hover {
            background: #c0392b;
        }

        .btn-edit {
            background: #3498db;
        }

        .btn-edit:hover {
            background: #2980b9;
        }

        .search-filter-container {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .search-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }

        .search-group {
            flex: 1;
        }

        .search-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #1a2a6c;
        }

        .search-input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #1a2a6c;
            box-shadow: 0 0 0 2px rgba(26, 42, 108, 0.2);
        }

        .filter-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .filter-group select {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            background-color: white;
            cursor: pointer;
        }

        .mcq-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }

        .mcq-card {
            background: #f9f9f9;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            border: 1px solid #eee;
            display: flex;
            flex-direction: column;
        }

        .mcq-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
            background: #f0f0f0;
            border-color: #1a2a6c;
        }

        .mcq-card h3 {
            color: #1a2a6c;
            margin-bottom: 15px;
            font-size: 1.3rem;
            font-weight: 600;
        }

        .mcq-options {
            margin: 15px 0;
        }

        .mcq-option {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            gap: 12px;
        }

        .option-letter {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            background: #1a2a6c;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 0.9rem;
        }

        .option-correct .option-letter {
            background: #2ecc71;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .card-badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            color: white;
        }

        .card-badge-time {
            background-color: #3498db;
        }

        .card-badge-difficulty-easy {
            background-color: #2ecc71;
        }

        .card-badge-difficulty-medium {
            background-color: #f39c12;
        }

        .card-badge-difficulty-hard {
            background-color: #e74c3c;
        }

        .card-description {
            color: #666;
            margin-bottom: 15px;
            font-size: 0.9rem;
            line-height: 1.5;
        }

        .card-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: auto;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .card-icon {
            margin-right: 8px;
            font-size: 0.9rem;
        }

        .card-action-buttons {
            display: flex;
            gap: 8px;
        }

        .mcq-card-image {
            width: 100%;
            max-height: 150px;
            object-fit: contain;
            margin-bottom: 15px;
            border-radius: 8px;
        }

        .mcq-card-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .highlight {
            background-color: yellow;
            font-weight: bold;
        }

        /* Modal Styles */
        /* .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 30px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            animation: modalopen 0.4s;
        }
         */
        /* @keyframes modalopen {
            from {opacity: 0; transform: translateY(-60px);}
            to {opacity: 1; transform: translateY(0);}
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        } */

        /* .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .modal-title {
            font-size: 1.5rem;
            color: #1a2a6c;
            font-weight: 600;
        }
        
        .form-group {
            margin-bottom: 20px;
        } 

        /* .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #1a2a6c;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
        } */

        /* .form-row .form-group {
            flex: 1;
        }
        
        .modal-form textarea, .modal-form input, .modal-form select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        } */

        /* .modal-form textarea:focus, .modal-form input:focus, .modal-form select:focus {
            outline: none;
            border-color: #1a2a6c;
            box-shadow: 0 0 0 2px rgba(26, 42, 108, 0.2);
        }
        
        .option-controls {
            margin-top: 15px;
        } */
        /*         
        .mcq-option-input {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
        }
         */
        /* .remove-option {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }
        
        .remove-option:hover {
            background: #c0392b;
        }
         */
        /* .image-upload-container {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        } */

        /* .image-preview {
            width: 100%;
            max-height: 200px;
            border-radius: 8px;
            border: 2px dashed #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: #f9f9f9;
        }
         */
        /* .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
         */
        .image-preview-placeholder {
            color: #999;
            text-align: center;
            padding: 20px;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }

        .file-input-wrapper input[type=file] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-input-button {
            background: #3498db;
            color: white;
            padding: 10px 18px;
            border-radius: 8px;
            cursor: pointer;
            display: inline-block;
            font-weight: 500;
        }

        .file-name {
            margin-top: 5px;
            font-size: 0.8rem;
            color: #666;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 25px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background: #2ecc71;
            color: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transform: translateX(200%);
            transition: transform 0.3s ease;
            z-index: 1001;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: #e74c3c;
        }

        .no-results {
            text-align: center;
            padding: 30px;
            color: #666;
            font-size: 1.1rem;
        }

        .empty-state {
            text-align: center;
            padding: 50px 0;
            color: #666;
        }

        .empty-state i {
            font-size: 3rem;
            color: #ddd;
            margin-bottom: 15px;
        }






        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            border-radius: 15px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);
            animation: modalFadeIn 0.3s ease-out;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            padding: 20px 30px;
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary);
        }

        .close-modal {
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--gray);
            transition: color 0.3s ease;
        }

        .close-modal:hover {
            color: var(--danger);
        }

        .modal-body {
            padding: 30px;
        }

        .modal-footer {
            padding: 20px 30px;
            border-top: 1px solid var(--light-gray);
            display: flex;
            justify-content: flex-end;
            gap: 15px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        input,
        textarea,
        select {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--light-gray);
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        input:focus,
        textarea:focus,
        select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-row .form-group {
            flex: 1;
        }

        .option-controls {
            margin-top: 15px;
        }

        .btn-add-option {
            background: var(--success);
        }

        .btn-add-option:hover {
            background: #3db8dc;
        }

        .btn-remove {
            background: var(--danger);
            padding: 6px 12px;
            font-size: 0.9rem;
        }

        .btn-remove:hover {
            background: #d61a6f;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #d61a6f;
        }

        .image-upload-container {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .image-preview {
            width: 100%;
            max-height: 200px;
            border-radius: 8px;
            border: 2px dashed var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: var(--light-gray);
        }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .image-preview-placeholder {
            color: var(--gray);
            text-align: center;
            padding: 20px;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }

        .file-input-wrapper input[type=file] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-input-button {
            background: var(--primary);
            color: white;
            padding: 10px 18px;
            border-radius: 8px;
            cursor: pointer;
            display: inline-block;
            font-weight: 500;
        }

        .file-input-button:hover {
            background: var(--secondary);
        }

        .file-name {
            margin-top: 5px;
            font-size: 0.8rem;
            color: var(--gray);
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            font-size: 0.9rem;
        }

        .breadcrumb a {
            color: var(--primary);
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        .breadcrumb span {
            margin: 0 5px;
        }
    </style>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }





        header {
            text-align: center;
            padding: 30px 0;
            color: white;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .page {
            background: white;
            border-radius: 15px;
            box-shadow: 0 15px 50px rgba(0, 0, 0, 0.2);
            padding: 30px;
            margin: 20px 0;
            min-height: 500px;
        }

        .page-title {
            color: #1a2a6c;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn {
            background: #1a2a6c;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn:hover {
            background: #0f1a4f;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn-delete {
            background: #e74c3c;
        }

        .btn-delete:hover {
            background: #c0392b;
        }

        .btn-edit {
            background: #3498db;
        }

        .btn-edit:hover {
            background: #2980b9;
        }

        .item-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }

        /* Alternative Card Design */
        .alt-card {
            background: white;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
            transition: all 0.4s ease;
            display: flex;
            flex-direction: column;
            height: 100%;
            position: relative;
            border: 1px solid #f0f0f0;
        }

        .alt-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.18);
            border-color: #1a2a6c;
        }

        .alt-card-header {
            background: linear-gradient(135deg, #1a2a6c, #2c3e50);
            color: white;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }

        .alt-card-header::after {
            content: "";
            position: absolute;
            bottom: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(30px, 30px);
        }

        .alt-card-title {
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 5px;
            position: relative;
            z-index: 1;
        }

        .alt-card-subtitle {
            font-size: 0.9rem;
            opacity: 0.8;
            position: relative;
            z-index: 1;
        }

        .alt-card-body {
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .alt-card-description {
            color: #666;
            margin-bottom: 20px;
            line-height: 1.6;
            flex-grow: 1;
        }

        .alt-card-footer {
            padding: 15px 20px;
            background: #f8f9fa;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .alt-card-stats {
            display: flex;
            gap: 15px;
        }

        .alt-card-stat {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.85rem;
            color: #666;
        }

        .alt-card-stat i {
            color: #1a2a6c;
        }

        .alt-card-actions {
            display: flex;
            gap: 8px;
        }

        .alt-card-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .alt-card-btn-edit {
            background: #3498db;
            color: white;
        }

        .alt-card-btn-edit:hover {
            background: #2980b9;
            transform: scale(1.1);
        }

        .alt-card-btn-delete {
            background: #e74c3c;
            color: white;
        }

        .alt-card-btn-delete:hover {
            background: #c0392b;
            transform: scale(1.1);
        }

        .alt-card-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            backdrop-filter: blur(5px);
        }

        .alt-card-image {
            width: 100%;
            height: 160px;
            object-fit: cover;
            border-bottom: 1px solid #eee;
        }

        /* MCQ specific card styles */
        .mcq-card-options {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 15px;
        }

        .mcq-card-option {
            background: #f1f2f6;
            border-radius: 20px;
            padding: 5px 12px;
            font-size: 0.8rem;
            color: #555;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .mcq-card-option.correct {
            background: #2ecc71;
            color: white;
        }

        .mcq-card-option-icon {
            font-size: 0.7rem;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #1a2a6c;
        }

        input,
        textarea,
        select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        input:focus,
        textarea:focus,
        select:focus {
            outline: none;
            border-color: #1a2a6c;
            box-shadow: 0 0 0 2px rgba(26, 42, 108, 0.2);
        }

        .form-row {
            display: flex;
            gap: 20px;
        }

        .form-row .form-group {
            flex: 1;
        }

        .back-btn {
            background: #7f8c8d;
            margin-top: 20px;
        }

        .back-btn:hover {
            background: #6c7a7a;
        }

        .mcq-options {
            margin: 15px 0;
        }

        .mcq-option {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            gap: 12px;
        }

        .mcq-option input[type="text"] {
            flex: 1;
        }

        .mcq-option .btn-remove {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .mcq-option .btn-remove:hover {
            background: #c0392b;
        }

        .option-controls {
            margin-top: 15px;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background: #2ecc71;
            color: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transform: translateX(200%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: #e74c3c;
        }

        .home-link {
            color: #3498db;
            text-decoration: none;
            font-weight: 600;
        }

        .home-link:hover {
            text-decoration: underline;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            font-size: 0.9rem;
        }

        .breadcrumb span {
            margin: 0 5px;
        }

        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }

        .breadcrumb a:hover {
            text-decoration: underline;
        }

        /* Image Upload Styles */
        .image-upload-container {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .image-preview {
            width: 100%;
            max-height: 200px;
            border-radius: 8px;
            border: 2px dashed #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: #f9f9f9;
        }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .image-preview-placeholder {
            color: #999;
            text-align: center;
            padding: 20px;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }

        .file-input-wrapper input[type=file] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-input-button {
            background: #3498db;
            color: white;
            padding: 10px 18px;
            border-radius: 8px;
            cursor: pointer;
            display: inline-block;
            font-weight: 500;
        }

        .file-name {
            margin-top: 5px;
            font-size: 0.8rem;
            color: #666;
        }

        /* Animation for cards */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .alt-card {
            animation: fadeInUp 0.5s ease-out forwards;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .form-row {
                flex-direction: column;
                gap: 15px;
            }

            .item-list {
                grid-template-columns: 1fr;
            }

            .alt-card-stats {
                flex-direction: column;
                gap: 5px;
            }
        }
    </style>

</head>


<body>
    <div class="menue">
        <ul>
            <li class="profile">

                <div class="profile-img">
                    <img src="" alt="profile">
                </div>
                <h2>mahmoud</h2>
            </li>

            <li>
                <a class="active data-link" href="/dashboard">
                    <i class=" fas fa-home"></i>
                    dashboard
                </a>
            </li>

            <li>
                <a class="data-link" href="/dashboard/clints">
                    <i class=" fas fa-user-group"></i>
                    clints
                </a>
            </li>

            <li>
                <a class="data-link" href="/dashboard/questions">
                    <i class=" fas fa-table"></i>
                    questions
                </a>
            </li>

            <li>
                <a class="data-link" href="/dashboard/posts">
                    <i class=" fas fa-pen"></i>
                    posts
                </a>
            </li>

            <li>
                <a class="data-link" href="/dashboard/settings">
                    <i class=" fas fa-cog"></i>
                    settings
                </a>
            </li>


            <li class="log-out ">
                <a href="">
                    <i class=" fas fa-sign-out"></i>
                    log out
                </a>
            </li>

        </ul>
    </div>

    <div class="content">

    </div>

    <script src="/javascripts/dashboard/dashboard.js"></script>

    <!-- question section script -->

    <script>

        let subjects = JSON.parse(localStorage.getItem('subjects')) || [];
        let modules = JSON.parse(localStorage.getItem('modules')) || [];
        let lectures = JSON.parse(localStorage.getItem('lectures')) || [];
        let mcqs = JSON.parse(localStorage.getItem('mcqs')) || [
            {
                id: 1,
                question: "What is the capital of France?",
                options: ["London", "Berlin", "Paris", "Madrid"],
                correctAnswer: "C",
                time: 5,
                difficulty: "easy",
                imageData: null
            },
            {
                id: 2,
                question: "Which planet is known as the Red Planet?",
                options: ["Venus", "Mars", "Jupiter", "Saturn"],
                correctAnswer: "B",
                time: 10,
                difficulty: "medium",
                imageData: null
            },
            {
                id: 3,
                question: "What is the chemical symbol for gold?",
                options: ["Au", "Ag", "Fe", "Cu"],
                correctAnswer: "A",
                time: 15,
                difficulty: "hard",
                imageData: null
            },
            {
                id: 4,
                question: "Which of these is not a programming language?",
                options: ["Java", "HTML", "Python", "Cobra"],
                correctAnswer: "B",
                time: 5,
                difficulty: "easy",
                imageData: null
            }
        ];

        // Current context
        let currentSubject = null;
        let currentModule = null;
        let currentLecture = null;
        let currentType = null;

        let editingSubjectId = null;
        let editingModuleId = null;
        let editingLectureId = null;
        let editingMCQId = null;







        // DOM Elements
        const mcqList = document.getElementById('mcq-list');
        const mcqModal = document.getElementById('mcq-modal');
        const modalTitle = document.getElementById('modal-title');
        const mcqForm = document.getElementById('mcq-form');
        const searchInput = document.getElementById('search-mcq');
        const filterDifficulty = document.getElementById('filter-difficulty');
        const filterTime = document.getElementById('filter-time');
        const filterCorrect = document.getElementById('filter-correct');
        const addOptionBtn = document.getElementById('add-option-btn');
        const editOptionsContainer = document.getElementById('options-container');
        const correctSelect = document.getElementById('mcq-correct');
        const mcqImage = document.getElementById('mcq-image');
        const imagePreview = document.getElementById('image-preview');
        const fileName = document.getElementById('file-name');
        const notification = document.getElementById('notification');

        // Current editing MCQ
        let currentMCQ = null;
        let currentImageData = null;

        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            loadQuestions();
            setupEventListeners();
        });

        function setupEventListeners() {



            document.getElementById('create-mcq-btn').addEventListener('click', () => {

                showTypeSelectionPage()

            });


            // Search and filter events
            searchInput.addEventListener('input', filterMCQs);
            filterDifficulty.addEventListener('change', filterMCQs);
            filterTime.addEventListener('change', filterMCQs);
            filterCorrect.addEventListener('change', filterMCQs);


            // Subject form
            document.getElementById('add-subject-btn').addEventListener('click', () => {
                editingSubjectId = null;
                document.getElementById('subject-form-title').textContent = 'Add New Subject';
                document.getElementById('subject-name').value = '';
                showSubjectForm();
            });

            document.getElementById('subject-form').addEventListener('submit', (e) => {
                e.preventDefault();
                saveSubject();
            });

            // Lecture form
            document.getElementById('add-lecture-btn').addEventListener('click', () => {
                editingLectureId = null;
                document.getElementById('lecture-form-title').textContent = 'Add New Lecture';
                document.getElementById('lecture-title').value = '';
                document.getElementById('lecture-description').value = '';
                showLectureForm();
            });

            // document.getElementById('lecture-form').addEventListener('submit', (e) => {
            //     e.preventDefault();
            //     saveLecture();
            // });

            // Module form
            document.getElementById('module-form').addEventListener('submit', (e) => {
                e.preventDefault();
                saveModule();
            });

            // Lecture form
            document.getElementById('add-lecture-btn').addEventListener('click', () => {
                editingLectureId = null;
                document.getElementById('lecture-form-title').textContent = 'Add New Lecture';
                document.getElementById('lecture-title').value = '';
                document.getElementById('lecture-description').value = '';
                showLectureForm();
            });

            document.getElementById('lecture-form').addEventListener('submit', (e) => {
                e.preventDefault();
                saveLecture();
            });

            // MCQ form
            document.getElementById('add-mcq-btn').addEventListener('click', () => {
                editingMCQId = null;
                document.getElementById('mcq-form-title').textContent = 'Add New MCQ';
                document.getElementById('mcq-question').value = '';
                resetOptions();
                resetImageUpload();
                // Set default values
                mcqTimeInput.value = '5'; // Default time: 5 minutes
                mcqDifficultySelect.value = 'medium'; // Default difficulty: Medium
                showMCQForm();
            });

            document.getElementById('mcq-form').addEventListener('submit', (e) => {
                e.preventDefault();
                saveMCQ();
            });














            // Modal events
            // document.getElementById('create-mcq-btn').addEventListener('click', () => openModal());
            document.querySelector('.close-modal').addEventListener('click', closeModal);
            document.getElementById('cancel-btn').addEventListener('click', closeModal);
            // Close modal when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === mcqModal) {
                    mcqModal.style.display = 'none';
                }
            });
            // Form events
            document.getElementById('modal-mcq-form').addEventListener('submit', saveMCQ);
            addOptionBtn.addEventListener('click', addOption);

            // Image upload
            mcqImage.addEventListener('change', handleImageUpload);



        }

        // Load MCQs with filtering
        function loadQuestions() {

            const searchTerm = searchInput.value.toLowerCase();
            const difficultyFilter = filterDifficulty.value;
            const timeFilter = filterTime.value;
            const correctFilter = filterCorrect.value;

            // Filter MCQs
            let filteredMCQs = mcqs;

            if (searchTerm) {
                filteredMCQs = filteredMCQs.filter(mcq =>
                    mcq.question.toLowerCase().includes(searchTerm) ||
                    mcq.options.some(opt => opt.toLowerCase().includes(searchTerm))
                );
            }

            if (difficultyFilter) {
                filteredMCQs = filteredMCQs.filter(mcq => mcq.difficulty === difficultyFilter);
            }

            if (timeFilter) {
                filteredMCQs = filteredMCQs.filter(mcq => mcq.time.toString() === timeFilter);
            }

            if (correctFilter) {
                filteredMCQs = filteredMCQs.filter(mcq => mcq.correctAnswer === correctFilter);
            }

            // Display MCQs
            if (filteredMCQs.length === 0) {
                mcqList.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <p>No MCQs match your search criteria</p>
                    </div>
                    `;
                return;
            }

            mcqList.innerHTML = '';

            filteredMCQs.forEach((mcq, index) => {
                const mcqCard = createQuestionCard(mcq, searchTerm);
                mcqList.appendChild(mcqCard);
            });
        }

        // Create MCQ card with highlighting
        function createQuestionCard(mcq, searchTerm) {
            const card = document.createElement('div');
            card.className = 'mcq-card';

            // Highlight search term in question
            let question = mcq.question;
            if (searchTerm) {
                question = highlightText(question, searchTerm);
            }

            // Create options with correct answer highlighted
            let optionsHTML = '';
            mcq.options.forEach((option, index) => {
                const letter = String.fromCharCode(65 + index); // A, B, C, D
                const isCorrect = letter === mcq.correctAnswer;
                const optionText = searchTerm ? highlightText(option, searchTerm) : option;

                optionsHTML += `
                    <div class="mcq-option ${isCorrect ? 'option-correct' : ''}">
                        <div class="option-letter">${letter}</div>
                        <div class="option-text">${optionText}</div>
                    </div>
                `;
            });

            // Get badge class based on difficulty
            const badgeClass = `card-badge-difficulty-${mcq.difficulty}`;

            // Create card HTML
            card.innerHTML = `
                <div class="card-header">
                    <h3>${question}</h3>
                    <span class="card-badge ${badgeClass}">${mcq.difficulty}</span>
                </div>
                
                ${mcq.imageData ? `<img src="${mcq.imageData}" alt="MCQ Image" class="mcq-card-image">` : ''}
                
                <div class="mcq-card-content">
                    <div class="mcq-options">
                        ${optionsHTML}
                    </div>
                    
                    <div class="card-footer">
                        <div class="card-info">
                            <span class="card-icon"><i class="fas fa-clock"></i></span>
                            ${mcq.time} minutes
                        </div>
                        <div class="card-action-buttons">
                            <button class="btn btn-edit" onclick="editQuestion(${mcq._id})">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-delete" onclick="deleteMCQ(${mcq._id})">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            `;

            return card;
        }

        // Highlight text in search results
        function highlightText(text, searchTerm) {
            if (!searchTerm) return text;
            const regex = new RegExp(`(${searchTerm})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }

        // Filter MCQs based on search and filters
        function filterMCQs() {
            loadQuestions();
        }

        // Open modal for creating/editing MCQ
        function openModal(mcq = null) {
            // Reset form
            mcqForm.reset();
            editOptionsContainer.innerHTML = '';
            resetImageUpload();

            // Set current MCQ
            currentMCQ = mcq;

            if (mcq) {
                // Edit mode
                modalTitle.textContent = 'Edit MCQ';
                document.getElementById('mcq-question').value = mcq.question;
                document.getElementById('mcq-time').value = mcq.time;
                document.getElementById('mcq-difficulty').value = mcq.difficulty;

                // Add options
                mcq.options.forEach((option, index) => {
                    addOptionWithValue(option, index === mcq.options.indexOf(mcq.options.find(opt => opt === mcq.options[mcq.options.indexOf(option)])));
                });

                // Set correct answer
                correctSelect.value = mcq.correct;

                // Set image if exists
                if (mcq.imageData) {
                    displayImage(mcq.imageData);
                }
            } else {
                // Create mode
                modalTitle.textContent = 'Create New MCQ';
                // Add 4 empty options by default
                for (let i = 0; i < 4; i++) {
                    addOption();
                }
            }

            // Show modal
            mcqModal.style.display = 'flex';
        }

        // Close modal
        function closeModal() {
            mcqModal.style.display = 'none';
        }

        // Add option to form
        // function addOption() {
        //     const optionIndex = editOptionsContainer.children.length;
        //     const letter = String.fromCharCode(65 + optionIndex); // A, B, C, D

        //     const optionDiv = document.createElement('div');
        //     optionDiv.className = 'mcq-option';
        //     optionDiv.innerHTML = `
        //         <div class="option-letter">${letter}</div>
        //        <input class='mcq-option-input' type="text" placeholder="Option ${letter}"  required>
        //         <button type="button" class='remove-option btn btn-remove'><i class="fas fa-times"></i></button>
        //     `;

        //     // Add event listener to remove button
        //     optionDiv.querySelector('.remove-option').addEventListener('click', function () {
        //         optionDiv.remove();
        //         updateOptionLetters();
        //         updateCorrectSelect();
        //     });

        //     editOptionsContainer.appendChild(optionDiv);
        //     updateCorrectSelect();
        // }

        // Add option with value (for editing)
        // function addOptionWithValue(value, isCorrect = false) {
        //     const optionIndex = editOptionsContainer.children.length;
        //     const letter = String.fromCharCode(65 + optionIndex); // A, B, C, D
        //     console.log("llll")
        //     const optionDiv = document.createElement('div');
        //     optionDiv.className = 'mcq-option';
        //     optionDiv.innerHTML = `
        //         <div class="option-letter">${letter}</div>
        //         <input class='mcq-option-input' type="text" placeholder="Option ${letter}" value="${value}" required>
        //         <button type="button" class='remove-option btn btn-remove'><i class="fas fa-times"></i></button>
        //     `;

        //     // Add event listener to remove button
        //     optionDiv.querySelector('.remove-option').addEventListener('click', function () {
        //         optionDiv.remove();
        //         updateOptionLetters();
        //         updateCorrectSelect();
        //     });

        //     editOptionsContainer.appendChild(optionDiv);

        //     // Set as correct if needed
        //     updateCorrectSelect();
        //     if (isCorrect) {
        //         correctSelect.value = letter;
        //     }

        // }

        // Update option letters after removing one
        function updateOptionLetters() {
            const options = editOptionsContainer.querySelectorAll('.mcq-option');
            options.forEach((option, index) => {
                const letter = String.fromCharCode(65 + index);
                option.querySelector('.option-letter').textContent = letter;
                option.querySelector('input').placeholder = `Option ${letter}`;
            });
        }

        // Update correct answer select options
        // function updateCorrectSelect() {
        //     correctSelect.innerHTML = '<option value="">Select correct option</option>';
        //     const options = editOptionsContainer.querySelectorAll('.mcq-option');
        //     options.forEach((option, index) => {
        //         const letter = String.fromCharCode(65 + index);
        //         const optionText = option.querySelector('input').value || `Option ${letter}`;
        //         const optionElement = document.createElement('option');
        //         optionElement.value = index;
        //         optionElement.textContent = optionText;
        //         correctSelect.appendChild(optionElement);
        //     });
        // }

        // Handle image upload
        function handleImageUpload(e) {
            const file = e.target.files[0];
            if (!file) return;

            // Validate file type
            if (!file.type.match('image.*')) {
                showNotification('Please select an image file', true);
                return;
            }

            // Validate file size (max 2MB)
            if (file.size > 2 * 1024 * 1024) {
                showNotification('Image size should be less than 2MB', true);
                return;
            }

            const reader = new FileReader();
            reader.onload = function (event) {
                currentImageData = event.target.result;
                displayImage(currentImageData);
                fileName.textContent = file.name;
            };
            reader.readAsDataURL(file);
        }

        // Display image in preview
        function displayImage(imageData) {
            imagePreview.innerHTML = `<img src="${imageData}" alt="MCQ Image">`;
        }

        // Reset image upload
        function resetImageUpload() {
            imagePreview.innerHTML = '<div class="image-preview-placeholder">No image selected</div>';
            fileName.textContent = '';
            currentImageData = null;
        }

        // Save MCQ (create or update)
        // function saveMCQ(e) {
        //     e.preventDefault();

        //     // Get form values
        //     const question = document.getElementById('mcq-question').value.trim();
        //     const time = parseInt(document.getElementById('mcq-time').value);
        //     const difficulty = document.getElementById('mcq-difficulty').value;
        //     const correctAnswer = document.getElementById('mcq-correct').value;

        //     // Get options
        //     const optionInputs = editOptionsContainer.querySelectorAll('.mcq-option-input');
        //     const options = Array.from(optionInputs).map(input => input.value.trim());

        //     // Validate
        //     if (!question) {
        //         showNotification('Question is required', true);
        //         return;
        //     }

        //     if (options.some(option => !option)) {
        //         showNotification('All options are required', true);
        //         return;
        //     }

        //     if (!correctAnswer) {
        //         showNotification('Please select the correct answer', true);
        //         return;
        //     }

        //     if (isNaN(time) || time < 1) {
        //         showNotification('Please enter a valid time (minimum 1 minute)', true);
        //         return;
        //     }

        //     if (!['easy', 'medium', 'hard'].includes(difficulty)) {
        //         showNotification('Please select a valid difficulty level', true);
        //         return;
        //     }

        //     // Create MCQ object
        //     const mcqData = {
        //         question,
        //         options,
        //         correctAnswer,
        //         time,
        //         difficulty,
        //         imageData: currentImageData
        //     };

        //     if (currentMCQ) {
        //         // Update existing MCQ
        //         const index = mcqs.findIndex(m => m.id === currentMCQ.id);
        //         if (index !== -1) {
        //             mcqData.id = currentMCQ.id;
        //             mcqs[index] = mcqData;
        //             showNotification('MCQ updated successfully');
        //         }
        //     } else {
        //         // Create new MCQ
        //         mcqData.id = Date.now();
        //         mcqs.push(mcqData);
        //         showNotification('MCQ created successfully');
        //     }

        //     // Close modal and refresh list
        //     closeModal();
        //     loadQuestions();
        // }

        // Edit MCQ
        function editQuestion(id) {
            const mcq = mcqs.find(m => m.id === id);
            if (mcq) {
                openModal(mcq);
            }
        }


        // Show notification
        function showNotification(message, isError = false) {
            notification.textContent = message;
            notification.className = isError ? 'notification error show' : 'notification show';

            setTimeout(() => {
                notification.className = 'notification';
            }, 3000);
        }
    </script>

    <script>


        // DOM Elements
        const questionsPage = document.getElementById('questions-page');
        const typeSelectionPage = document.getElementById('type-selection-page');

        const subjectsPage = document.getElementById('subjects-page');
        const modulesPage = document.getElementById('modules-page');
        const lecturesPage = document.getElementById('lectures-page');
        const mcqsPage = document.getElementById('mcqs-page');
        const subjectFormContainer = document.getElementById('subject-form-container');
        const moduleFormContainer = document.getElementById('module-form-container');
        const lectureFormContainer = document.getElementById('lecture-form-container');
        const mcqFormContainer = document.getElementById('mcq-form-container');
        const optionsContainer = document.getElementById('options-container');

        const mcqCorrectSelect = document.getElementById('mcq-correct');
        const fileInput = document.getElementById('mcq-image');
        const mcqTimeInput = document.getElementById('mcq-time');
        const mcqDifficultySelect = document.getElementById('mcq-difficulty');



        // Navigation functions
        function showTypeSelectionPage() {
            console.log("lllllllllllll");
            
            hideAllPages();
            typeSelectionPage.style.display = 'block';
        }

        function showSubjectsPage(type) {
            hideAllPages();
            subjectsPage.style.display = 'block';
            if (type) {
                currentType = type;
                loadSubjects(type);
                console.log(type);
                // Update breadcrumb anchor text to currentType capitalized
                const breadcrumbHomeLink = document.querySelector('#subjects-page .breadcrumb a');
                if (breadcrumbHomeLink) {
                    breadcrumbHomeLink.textContent = currentType.charAt(0).toUpperCase() + currentType.slice(1);
                    // breadcrumbHomeLink.href = '#';
                    // breadcrumbHomeLink.onclick = function (e) {
                    //     e.preventDefault();
                    //     showTypeSelectionPage();
                    // };
                }
            }
        }

        function showModulesPage(subjectId) {
            hideAllPages();
            modulesPage.style.display = 'block';
            currentSubject = subjects.find(s => s._id === subjectId);
            console.log(currentSubject);

            // Update breadcrumb to show currentType instead of Home
            const breadcrumbHomeLink = document.querySelector('#modules-page .breadcrumb a');
            if (breadcrumbHomeLink) {
                breadcrumbHomeLink.textContent = currentType ? currentType.charAt(0).toUpperCase() + currentType.slice(1) : 'Home';
                // breadcrumbHomeLink.href = '#';
                // breadcrumbHomeLink.onclick = function (e) {
                //     e.preventDefault();
                //     showTypeSelectionPage();
                // };
            }

            document.getElementById('subject-name-breadcrumb-modules').textContent = currentSubject.subject;
            loadModules(subjectId);
        }

        function showLecturesPage(moduleId) {
            hideAllPages();

            lecturesPage.style.display = 'block';
            currentModule = modules.find(m => m._id === moduleId);

            // Update breadcrumb to show currentType instead of Home
            const breadcrumbHomeLink = document.querySelector('#lectures-page .breadcrumb a');
            if (breadcrumbHomeLink) {
                breadcrumbHomeLink.textContent = currentType ? currentType.charAt(0).toUpperCase() + currentType.slice(1) : 'Home';
                breadcrumbHomeLink.href = '#';
                // breadcrumbHomeLink.onclick = function (e) {
                //     e.preventDefault();
                //     // showSubjectsPage(currentType);
                // };
            }

            document.getElementById('module-subject-breadcrumb').textContent = currentSubject.subject;
            document.getElementById('module-name-breadcrumb').textContent = currentModule.module;
            loadLectures(moduleId);
        }

        function showMCQsPage(lectureId) {
            console.log(lectureId);

            hideAllPages();
            mcqsPage.style.display = 'block';
            currentLecture = lectures.find(l => l._id === lectureId);
            console.log(currentLecture);

            // Update breadcrumb to show currentType instead of Home
            const breadcrumbHomeLink = document.querySelector('#mcqs-page .breadcrumb a');
            if (breadcrumbHomeLink) {
                breadcrumbHomeLink.textContent = currentType ? currentType.charAt(0).toUpperCase() + currentType.slice(1) : 'Home';
                // breadcrumbHomeLink.href = '#';
                // breadcrumbHomeLink.onclick = function (e) {
                //     e.preventDefault();
                //     // showSubjectsPage(currentType);
                // };
            }

            document.getElementById('lecture-module-breadcrumb').textContent = currentSubject.subject;
            document.getElementById('lecture-module-name-breadcrumb').textContent = currentModule.module;
            document.getElementById('lecture-name-breadcrumb').textContent = currentLecture.lecture;
            loadMCQs(lectureId);
        }

        function showSubjectForm() {
            hideAllPages();
            subjectFormContainer.style.display = 'block';
        }

        function showModuleForm() {
            hideAllPages();
            moduleFormContainer.style.display = 'block';
        }

        function showLectureForm() {
            hideAllPages();
            lectureFormContainer.style.display = 'block';
        }

        function showMCQForm() {
            hideAllPages();
            mcqFormContainer.style.display = 'block';
        }

        function hideAllPages() {
            questionsPage.style.display = "none"
            typeSelectionPage.style.display = "none"
            subjectsPage.style.display = 'none';
            modulesPage.style.display = 'none';
            lecturesPage.style.display = 'none';
            mcqsPage.style.display = 'none';
            subjectFormContainer.style.display = 'none';
            moduleFormContainer.style.display = 'none';
            lectureFormContainer.style.display = 'none';
            mcqFormContainer.style.display = 'none';
        }


        // Data loading functions
        async function loadSubjects(type) {
            const subjectsList = document.getElementById('subjects-list');
            subjectsList.innerHTML = '';

            let response = await fetch("/api/v1/subjects")

            subjects = await response.json()
            subjects = subjects.data

            console.log(subjects);
            console.log(currentType);
            console.log(type);

            const typeSubjects = subjects.filter(s => s.type === currentType);

            if (typeSubjects.length === 0) {
                subjectsList.innerHTML = '<p class="card-description">No subjects found. Add your first subject!</p>';
                return;
            }

            typeSubjects.forEach((subject, index) => {
                const subjectCard = createSubjectCard(subject, index);

                subjectCard.addEventListener('click', (e) => {
                    if (!e.target.closest('.alt-card-actions')) {
                        showModulesPage(subject._id);
                        console.log(subject);

                    }
                });

                subjectsList.appendChild(subjectCard);
            });
        }

        async function loadModules(subjectId) {
            const modulesList = document.getElementById('modules-list');
            modulesList.innerHTML = '';
            console.log(subjectId);

            let response = await fetch("/api/v1/modules")

            modules = await response.json()
            modules = modules.data
            console.log("modules", modules);

            const subjectModules = modules.filter(m => m.subject === subjectId);
            console.log(subjectModules);

            if (subjectModules.length === 0) {
                modulesList.innerHTML = '<p class="card-description">No modules found for this subject. Add your first module!</p>';
                return;
            }

            subjectModules.forEach((module, index) => {
                const moduleCard = createModuleCard(module, index);

                moduleCard.addEventListener('click', (e) => {
                    if (!e.target.closest('.alt-card-actions')) {
                        showLecturesPage(module._id);
                    }
                });

                modulesList.appendChild(moduleCard);
            });
        }

        async function loadLectures(moduleId) {
            const lecturesList = document.getElementById('lectures-list');
            lecturesList.innerHTML = '';
            let response = await fetch("/api/v1/lectures")

            lectures = await response.json()
            lectures = lectures.data
            console.log("lec", lectures);

            const moduleLectures = lectures.filter(l => l.module == moduleId);
            console.log(moduleLectures);

            if (moduleLectures.length === 0) {
                lecturesList.innerHTML = '<p class="card-description">No lectures found for this subject. Add your first lecture!</p>';
                return;
            }

            moduleLectures.forEach((lecture, index) => {
                console.log(index);

                const lectureCard = createLectureCard(lecture, index);

                lectureCard.addEventListener('click', (e) => {
                    if (!e.target.closest('.alt-card-actions')) {
                        showMCQsPage(lecture._id);
                    }
                });

                lecturesList.appendChild(lectureCard);
            });
        }

        async function loadMCQs(lectureId) {
            const mcqsList = document.getElementById('mcqs-list');
            mcqsList.innerHTML = '';

            let response = await fetch("/api/v1/questions")
            mcqs = await response.json()
            mcqs = mcqs.data
            console.log("mcqs", mcqs);
            const lectureMCQs = mcqs.filter(m => m.lecture === lectureId);
            console.log(lectureMCQs);

            if (lectureMCQs.length === 0) {
                mcqsList.innerHTML = '<p class="card-description">No MCQs found for this lecture. Add your first MCQ!</p>';
                return;
            }

            lectureMCQs.forEach((mcq, index) => {
                const mcqCard = createMCQCard(mcq, index);
                mcqsList.appendChild(mcqCard);
            });
        }

        // Alternative card creation functions
        function createSubjectCard(subject, index) {
            const card = document.createElement('div');
            card.className = 'alt-card';
            card.style.animationDelay = `${index * 0.1}s`;

            // Count related lectures
            // const subjectLectures = lectures.filter(l => l.subjectId === subject._id);
            // const lectureCount = subjectLectures.length;

            // Count related MCQs
            // const mcqCount = mcqs.filter(m => subjectLectures.some(l => l.id === m.lecture._id)).length;

            card.innerHTML = `
                <div class="alt-card-header">
                    <h3 class="alt-card-title">${subject.subject}</h3>
                    <p class="alt-card-subtitle">Subject</p>
                    <span class="alt-card-badge">${subject.lectureCount} lectures</span>
                </div>
                <div class="alt-card-body">
                    <p class="alt-card-description">This subject contains ${subject.lectureCount} lectures and ${subject.questionCount} MCQs.</p>
                </div>
                <div class="alt-card-footer">
                    <div class="alt-card-stats">
                        <div class="alt-card-stat">
                            <i class="fas fa-book"></i>
                            <span>${subject.lectureCount} lectures</span>
                        </div>
                        <div class="alt-card-stat">
                            <i class="fas fa-question-circle"></i>
                            <span>${subject.questionCount} MCQs</span>
                        </div>
                    </div>
                    <div class="alt-card-actions">
                        <button class="alt-card-btn alt-card-btn-edit" onclick=editSubject("${subject._id}") title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="alt-card-btn alt-card-btn-delete" onclick=deleteSubject("${subject._id}") title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;

            return card;
        }

        function createModuleCard(module, index) {
            const card = document.createElement('div');
            card.className = 'alt-card';
            card.style.animationDelay = `${index * 0.1}s`;

            // Count related lectures
            // const moduleLectures = lectures.filter(l => l.moduleId === module._id);
            // const lectureCount = moduleLectures.length;

            // Count related MCQs
            // const mcqCount = mcqs.filter(m => moduleLectures.some(l => l.id === m.lectureId)).length;

            card.innerHTML = `
                <div class="alt-card-header">
                    <h3 class="alt-card-title">${module.module}</h3>
                    <p class="alt-card-subtitle">Module</p>
                    <span class="alt-card-badge">${module.lectureCount || 0} lectures</span>
                </div>
                <div class="alt-card-body">
                    <p class="alt-card-description">This module contains ${module.lectureCount || 0} lectures and ${module.questionCount || 0} MCQs.</p>
                </div>
                <div class="alt-card-footer">
                    <div class="alt-card-stats">
                        <div class="alt-card-stat">
                            <i class="fas fa-book"></i>
                            <span>${module.lectureCount || 0} lectures</span>
                        </div>
                        <div class="alt-card-stat">
                            <i class="fas fa-question-circle"></i>
                            <span>${module.questionCount || 0} MCQs</span>
                        </div>
                    </div>
                    <div class="alt-card-actions">
                        <button class="alt-card-btn alt-card-btn-edit" onclick=editModule("${module._id}") title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="alt-card-btn alt-card-btn-delete" onclick=deleteModule("${module._id}") title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;

            return card;
        }

        function createLectureCard(lecture, index) {
            const card = document.createElement('div');
            card.className = 'alt-card';
            card.style.animationDelay = `${index * 0.1}s`;

            // Count related MCQs
            const mcqCount = mcqs.filter(m => m.lectureId === lecture._id).length;

            card.innerHTML = `
                <div class="alt-card-header">
                    <h3 class="alt-card-title">${lecture.lecture}</h3>
                    <p class="alt-card-subtitle">Lecture</p>
                    <span class="alt-card-badge">${mcqCount} MCQs</span>
                </div>
                <div class="alt-card-body">
                    <p class="alt-card-description">${lecture.description || 'No description provided'}</p>
                </div>
                <div class="alt-card-footer">
                    <div class="alt-card-stats">
                        <div class="alt-card-stat">
                            <i class="fas fa-question-circle"></i>
                            <span>${mcqCount} MCQs</span>
                        </div>
                    </div>
                    <div class="alt-card-actions">
                        <button class="alt-card-btn alt-card-btn-edit" onclick=editLecture("${lecture._id}") title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="alt-card-btn alt-card-btn-delete" onclick=deleteLecture("${lecture._id}") title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;

            return card;
        }

        function createMCQCard(mcq, index) {
            const card = document.createElement('div');
            card.className = 'alt-card';
            card.style.animationDelay = `${index * 0.1}s`;

            // Create options display
            let optionsHtml = '';
            mcq.answers.forEach((option, i) => {
                const isCorrect = option == mcq.correct
                optionsHtml += `
                    <div class="mcq-card-option ${isCorrect ? 'correct' : ''}">
                        <i class="fas ${isCorrect ? 'fa-check' : 'fa-circle'} mcq-card-option-icon"></i>
                        <span>${option}</span>
                    </div>
                `;
            });

            // Difficulty badge color
            let difficultyClass = '';
            if (mcq.difficulty === 'easy') difficultyClass = 'card-badge-difficulty-easy';
            else if (mcq.difficulty === 'medium') difficultyClass = 'card-badge-difficulty-medium';
            else if (mcq.difficulty === 'hard') difficultyClass = 'card-badge-difficulty-hard';

            let cardContent = `
                <div class="alt-card-header">
                    <h3 class="alt-card-title">Question</h3>
                    <p class="alt-card-subtitle">${mcq.question}</p>
                    <span class="alt-card-badge ${difficultyClass}">${mcq.difficulty}</span>
                </div>
            `;

            // Add image if exists
            if (mcq.images[0]) {
                console.log("lllllllllll");

                cardContent += `<img src="${mcq.images[0]}" alt="MCQ Image" class="alt-card-image">`;
            }

            cardContent += `
                <div class="alt-card-body">
                    <div class="mcq-card-options">
                        ${optionsHtml}
                    </div>
                </div>
                <div class="alt-card-footer">
                    <div class="alt-card-stats">
                        <div class="alt-card-stat">
                            <i class="fas fa-clock"></i>
                            <span>${mcq.duration} min</span>
                        </div>
                        <div class="alt-card-stat">
                            <i class="fas fa-list"></i>
                            <span>${mcq.answers.length} options</span>
                        </div>
                    </div>
                    <div class="alt-card-actions">
                        <button class="alt-card-btn alt-card-btn-edit" onclick=editMCQ("${mcq._id}") title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="alt-card-btn alt-card-btn-delete" onclick=deleteMCQ("${mcq._id}") title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;

            card.innerHTML = cardContent;
            return card;
        }


        // CRUD operations

        async function saveSubject() {
            const nameInput = document.getElementById('subject-name');
            const name = nameInput.value.trim();

            if (!name) {
                showNotification('Subject name is required', true);
                return;
            }

            if (editingSubjectId) {

                // Update existing subject
                const index = subjects.findIndex(s => s._id === editingSubjectId);
                if (index !== -1) {
                    await fetch(`/api/v1/subjects/${editingSubjectId}`, {
                        method: "put",
                        headers: {
                            'Content-type': 'application/json; charset=UTF-8',
                        },
                        body: JSON.stringify({ "subject": name, type: currentType })
                    }).then((response) => {

                        response.json().then((result) => {
                            // let subjects = JSON.parse(localStorage.getItem("subjects"))
                            // subjects.push(result)
                            // localStorage.setItem("subjects", JSON.stringify(subjects))
                            showNotification('Subject updated successfully');


                        })
                    })






                }
            } else {
                // Add new subject

                await fetch("/api/v1/subjects", {
                    method: "post",
                    headers: {
                        'Content-type': 'application/json; charset=UTF-8',
                    },
                    body: JSON.stringify({ "subject": name, type: currentType })
                }).then((response) => {

                    response.json().then((result) => {
                        // let subjects = JSON.parse(localStorage.getItem("subjects"))
                        // subjects.push(result)
                        // localStorage.setItem("subjects", JSON.stringify(subjects))
                        showNotification('Subject added successfully');


                    })
                })

                // subjects.push(newSubject);
            }

            // localStorage.setItem('subjects', JSON.stringify(subjects));
            showSubjectsPage(currentType);
        }

        function saveLecture() {
            const titleInput = document.getElementById('lecture-title');
            const descriptionInput = document.getElementById('lecture-description');

            const title = titleInput.value.trim();
            const description = descriptionInput.value.trim();

            if (!title) {
                showNotification('Lecture title is required', true);
                return;
            }

            if (editingLectureId) {
                // Update existing lecture
                const index = lectures.findIndex(l => l.id === editingLectureId);
                if (index !== -1) {

                    fetch(`/api/v1/lectures/${editingLectureId}`, {
                        method: "put",
                        headers: {
                            'Content-type': 'application/json; charset=UTF-8',
                        },
                        body: JSON.stringify({ lecture: title, description: description })
                    }).then((response) => {
                        response.json().then((result) => {
                            // let lectures = JSON.parse(localStorage.getItem("lectures"))
                            lectures.push(result)
                            // localStorage.setItem("lectures", JSON.stringify(lectures))
                            showNotification('Lecture updated successfully');


                        })
                    })



                }
            } else {
                // Add new lecture

                fetch("/api/v1/lectures", {
                    method: "post",
                    headers: {
                        'Content-type': 'application/json; charset=UTF-8',
                    },
                    body: JSON.stringify({ lecture: title, description: description, subject: currentSubject._id, module: currentModule._id })
                }).then((response) => {
                    response.json().then((result) => {
                        // let lectures = JSON.parse(localStorage.getItem("lectures"))
                        // lectures.push(result)
                        // localStorage.setItem("lectures", JSON.stringify(lectures))
                        console.log(result);

                        showNotification('Lecture added successfully');



                    })
                })


            }



            // localStorage.setItem('lectures', JSON.stringify(lectures));

            showLecturesPage(currentModule._id);
        }

        function saveMCQ() {
            const questionInput = document.getElementById('mcq-question');
            const optionInputs = document.querySelectorAll('.mcq-option-input');
            const correctSelect = document.getElementById('mcq-correct');
            const timeInput = document.getElementById('mcq-time');
            const difficultySelect = document.getElementById('mcq-difficulty');

            const question = questionInput.value.trim();
            const options = Array.from(optionInputs).map(input => input.value.trim());
            const correctIndex = parseInt(correctSelect.value);
            const time = parseInt(timeInput.value);
            const difficulty = difficultySelect.value;



            if (!question) {
                showNotification('Question is required', true);
                return;
            }



            if (options.some(option => !option)) {
                showNotification('All options are required', true);
                return;
            }

            if (correctIndex === -1) {
                showNotification('Please select the correct answer', true);
                return;
            }

            if (isNaN(time) || time < 1) {
                showNotification('Please enter a valid time (minimum 1 minute)', true);
                return;
            }

            if (!['easy', 'medium', 'hard'].includes(difficulty)) {
                showNotification('Please select a valid difficulty level', true);
                return;
            }

            if (editingMCQId) {
                // Update existing MCQ
                // const index = mcqs.findIndex(m => m._id === editingMCQId);

                let body = new FormData()

                body.append("difficulty", difficulty)
                body.append("question", question)
                body.append("duration", time)

                for (const file of mcqImage.files) {
                    body.append('images', file);
                }

                for (let i = 0; i < options.length; i++) {
                    body.append("answers", options[i])
                }
                body.append("correct", options[correctIndex])



                fetch(`/api/v1/questions/${editingMCQId}`, {
                    method: "put",

                    body: body
                }).then((response) => {
                    response.json().then((result) => {

                        console.log(result)
                        mcqs.push(result);
                        showNotification('MCQ updated successfully');
                        showMCQsPage(currentLecture._id);

                    })
                })

            } else {
                // Add new MCQ


                let body = new FormData()

                body.append("subject", currentSubject._id)
                body.append("lecture", currentLecture._id)
                body.append("difficulty", difficulty)
                body.append("question", question)
                body.append("duration", time)

                for (const file of mcqImage.files) {
                    body.append('images', file);
                }

                for (let i = 0; i < options.length; i++) {
                    body.append("answers", options[i])
                }
                body.append("correct", options[correctIndex])



                fetch("/api/v1/questions", {
                    method: "post",

                    body: body
                }).then((response) => {
                    response.json().then((result) => {

                        console.log(result)
                        mcqs.push(result);
                        showNotification('MCQ added successfully');
                        // localStorage.setItem('mcqs', JSON.stringify(mcqs));
                        showMCQsPage(currentLecture._id);

                    })
                })





            }

        }

        function editSubject(subjectId) {
            const subject = subjects.find(s => s._id === subjectId);
            if (subject) {
                editingSubjectId = subjectId;
                document.getElementById('subject-form-title').textContent = 'Edit Subject';
                document.getElementById('subject-name').value = subject.subject;
                showSubjectForm();
            }
        }

        function editLecture(lectureId) {
            const lecture = lectures.find(l => l._id === lectureId);
            if (lecture) {
                editingLectureId = lectureId;
                document.getElementById('lecture-form-title').textContent = 'Edit Lecture';
                document.getElementById('lecture-title').value = lecture.lecture;
                document.getElementById('lecture-description').value = lecture.description || '';
                showLectureForm();
            }
        }

        function editMCQ(mcqId) {

            const mcq = mcqs.find(m => m._id === mcqId);
            if (mcq) {
                editingMCQId = mcqId;
                document.getElementById('mcq-form-title').textContent = 'Edit MCQ';
                document.getElementById('mcq-question').value = mcq.question;

                // Clear existing options
                optionsContainer.innerHTML = '';

                // Add options
                mcq.answers.forEach((option, index) => {
                    addOptionWithValue(option, option === mcq.correct[0]);
                });
                updateCorrectSelect();

                mcqCorrectSelect.value = mcq.answers.indexOf(mcq.correct[0]);
                // Set time and difficulty
                mcqTimeInput.value = mcq.duration;
                mcqDifficultySelect.value = mcq.difficulty;

                // Set image if exists
                if (mcq.imageData) {
                    currentImageData = mcq.imageData;
                    displayImage(mcq.imageData);
                } else {
                    resetImageUpload();
                }

                showMCQForm();
            }
        }

        // Save module function
        async function saveModule() {
            const nameInput = document.getElementById('module-name');
            const name = nameInput.value.trim();

            if (!name) {
                showNotification('Module name is required', true);
                return;
            }

            if (editingModuleId) {
                // Update existing module
                fetch(`/api/v1/modules/${editingModuleId}`, {
                    method: "put",
                    headers: {
                        'Content-type': 'application/json; charset=UTF-8',
                    },
                    body: JSON.stringify({ "module": name, type: currentType })
                }).then((response) => {
                    response.json().then((result) => {
                        showNotification('Module updated successfully');
                        showModulesPage(currentSubject._id);
                    })
                })
            } else {
                // Add new module
                fetch("/api/v1/modules", {
                    method: "post",
                    headers: {
                        'Content-type': 'application/json; charset=UTF-8',
                    },
                    body: JSON.stringify({ "module": name, "subject": currentSubject._id })
                }).then((response) => {
                    response.json().then((result) => {
                        showNotification('Module added successfully');
                        showModulesPage(currentSubject._id);
                    })
                })
            }
        }

        function editModule(moduleId) {
            const module = modules.find(m => m._id === moduleId);
            if (module) {
                editingModuleId = moduleId;
                document.getElementById('module-form-title').textContent = 'Edit Module';
                document.getElementById('module-name').value = module.module;
                showModuleForm();
            }
        }

        function deleteModule(moduleId) {
            if (confirm('Are you sure you want to delete this module? This will also delete all related lectures and MCQs.')) {
                fetch(`/api/v1/modules/${moduleId}`, {
                    method: "delete"
                }).then((response) => {
                    showNotification('Module deleted successfully');
                    showModulesPage(currentSubject._id);
                })
            }
        }

        function deleteSubject(subjectId) {
            // if (confirm('Are you sure you want to delete this subject? This will also delete all related lectures and MCQs.')) {
            //     subjects = subjects.filter(s => s.id !== subjectId);
            //     lectures = lectures.filter(l => l.subject.Id !== subjectId);
            //     mcqs = mcqs.filter(m => !lectures.some(l => l.subjectId === subjectId && l.id === m.lectureId));

            //     localStorage.setItem('subjects', JSON.stringify(subjects));
            //     localStorage.setItem('lectures', JSON.stringify(lectures));
            //     localStorage.setItem('mcqs', JSON.stringify(mcqs));

            //     showNotification('Subject deleted successfully');
            //     showSubjectsPage();
            // }



            if (confirm('Are you sure you want to delete this subject? This will also delete all related lectures and MCQs.')) {

                fetch(`/api/v1/subjects/${subjectId}`, {
                    method: "delete"
                }).then((response) => {
                    // mcqs.push(result);

                    showNotification('Subject deleted successfully');
                    showSubjectsPage(currentType);

                })
            }


        }

        function deleteLecture(lectureId) {
            // if (confirm('Are you sure you want to delete this lecture? This will also delete all related MCQs.')) {
            //     lectures = lectures.filter(l => l.id !== lectureId);
            //     mcqs = mcqs.filter(m => m.lectureId !== lectureId);

            //     localStorage.setItem('lectures', JSON.stringify(lectures));
            //     localStorage.setItem('mcqs', JSON.stringify(mcqs));

            //     showNotification('Lecture deleted successfully');
            //     showLecturesPage(currentSubject._id);
            // }

            if (confirm('Are you sure you want to delete this lecture? This will also delete all related MCQs.')) {

                fetch(`/api/v1/lectures/${lectureId}`, {
                    method: "delete"
                }).then((response) => {
                    // mcqs.push(result);
                    showNotification('Lecture deleted successfully');
                    showLecturesPage(currentModule._id);

                })
            }


        }

        function deleteMCQ(mcqId) {
            if (confirm('Are you sure you want to delete this MCQ?')) {
                // mcqs = mcqs.filter(m => m.id !== mcqId);
                // localStorage.setItem('mcqs', JSON.stringify(mcqs));
                fetch(`/api/v1/questions/${mcqId}`, {
                    method: "delete"
                }).then((response) => {
                    // mcqs.push(result);
                    showNotification('MCQ deleted successfully');
                    showMCQsPage(currentLecture._id);

                })


            }
        }

        // Dynamic options functions
        function addOption() {
            addOptionWithValue('', false);
            updateCorrectSelect();
        }

        function addOptionWithValue(value = '', isCorrect = false) {
            const optionIndex = optionsContainer.children.length;
            const optionDiv = document.createElement('div');
            optionDiv.className = 'mcq-option';

            const optionInput = document.createElement('input');
            optionInput.type = 'text';
            optionInput.className = 'mcq-option-input';
            optionInput.placeholder = `Option ${String.fromCharCode(65 + optionIndex)}`; // A, B, C, etc.
            optionInput.value = value;
            optionInput.required = true;

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'btn-remove';
            removeBtn.textContent = 'Remove';
            removeBtn.onclick = function () {
                optionDiv.remove();
                updateCorrectSelect();
                updateOptionPlaceholders();
            };

            optionDiv.appendChild(optionInput);
            optionDiv.appendChild(removeBtn);
            optionsContainer.appendChild(optionDiv);

            // if (isCorrect) {
            //     updateCorrectSelect();
            //     mcqCorrectSelect.value = optionIndex;
            // }
        }

        function resetOptions() {
            optionsContainer.innerHTML = '';
            // Add 4 options by default
            for (let i = 0; i < 4; i++) {
                addOption();
            }
            updateCorrectSelect();
        }

        function updateCorrectSelect() {
            mcqCorrectSelect.innerHTML = '<option value="">Select correct option</option>';

            const options = optionsContainer.querySelectorAll('.mcq-option');
            options.forEach((option, index) => {
                // const optionText = option.querySelector('input').value || `Option ${String.fromCharCode(65 + index)}`;
                const optionText = `Option ${String.fromCharCode(65 + index)}`;
                const optionElement = document.createElement('option');
                optionElement.value = index;
                optionElement.textContent = optionText;
                mcqCorrectSelect.appendChild(optionElement);
            });
        }

        function updateOptionPlaceholders() {
            const options = optionsContainer.querySelectorAll('.mcq-option');
            options.forEach((option, index) => {
                const input = option.querySelector('input');
                input.placeholder = `Option ${String.fromCharCode(65 + index)}`;
            });
        }


    </script>

</body>

</html>